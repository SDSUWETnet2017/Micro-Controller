/* Alven Eusantos
 * Sub Node Integration
 * Phaust Chemical Manufacturing
 */

#pragma config BWRP = OFF               // Boot Segment Write Protect (Disabled)
#pragma config BSS = OFF                // Boot segment Protect (No boot flash segment)

// FGS
#pragma config GWRP = OFF               // General Segment Flash Write Protect (General segment may be written)
#pragma config GSS0 = OFF               // General Segment Code Protect (No Protection)

// FOSCSEL
#pragma config FNOSC = FRCPLL           // Oscillator Select (Fast RC Oscillator with Postscaler and PLL (FRCDIV+PLL))
#pragma config SOSCSRC = ANA            // SOSC Source Type (Analog Mode for use with crystal)
#pragma config LPRCSEL = HP             // LPRC Power and Accuracy (High Power/High Accuracy)
#pragma config IESO = ON                // Internal External Switch Over bit (Internal External Switchover mode enabled (Two-speed Start-up enabled))

// FOSC
#pragma config POSCMD = NONE            // Primary Oscillator Mode (Primary oscillator disabled)
#pragma config OSCIOFNC = ON            // CLKO Pin I/O Function (Port I/O enabled (CLKO disabled))
#pragma config POSCFREQ = HS            // Primary Oscillator Frequency Range (Primary Oscillator/External Clock frequency >8MHz)
#pragma config SOSCSEL = SOSCHP         // SOSC Power Selection Configuration bits (Secondary Oscillator configured for high-power operation)
#pragma config FCKSM = CSECME           // Clock Switching and Monitor Selection (Clock Switching and Fail-safe Clock Monitor Enabled)

// FWDT
#pragma config WDTPS = PS32768          // Watchdog Timer Postscale Select bits (1:32768)
#pragma config FWPSA = PR128            // WDT Prescaler bit (WDT prescaler ratio of 1:128)
#pragma config FWDTEN = SWON            // Watchdog Timer Enable bits (WDT controlled with SWDTEN bit setting)
#pragma config WINDIS = OFF             // Windowed Watchdog Timer Disable bit (Standard WDT selected (windowed WDT disabled))

// FPOR
#pragma config BOREN = BOR3             // Brown-out Reset Enable bits (Enabled in hardware; SBOREN bit disabled)
#pragma config PWRTEN = ON              // Power-up Timer Enable (PWRT enabled)
#pragma config I2C1SEL = PRI            // Alternate I2C1 Pin Mapping bit (Default SCL1/SDA1 Pins for I2C1)
#pragma config BORV = V18               // Brown-out Reset Voltage bits (Brown-out Reset at 1.8V)
#pragma config MCLRE = ON               // MCLR Pin Enable bit (RA5 input disabled; MCLR enabled)

// FICD
#pragma config ICS = PGx1               // ICD Pin Placement Select (EMUC/EMUD share PGC1/PGD1)
//#pragma config LVP = OFF

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <stdint.h>
#include <stdbool.h>
#include <p24F16KL401.h>
#include <uart.h>

//*****************************************************************************************************************************************************************************************
//Global Variables
//*****************************************************************************************************************************************************************************************

int countInterrupt = 0;
int countInterrupt2 = 0;
int finalValue = 0;
char subNodeID = '1';
volatile bool checkVoltageFlag = 0;
int batteryVoltage = 0;
volatile bool UARTSendFlag;
volatile bool confirmationReceive;

//*****************************************************************************************************************************************************************************************
//Initialize Child Functions
//*****************************************************************************************************************************************************************************************

void TMR1init(void);
void ADCinit(void);
void Interruptinit(void);
void UARTsendinit(void);
void UARTreceiveinit(void);
void checkForReceive(void);

//*****************************************************************************************************************************************************************************************
//Main
//*****************************************************************************************************************************************************************************************

void main(void)
{  
    TMR1init();
    ADCinit();
    Interruptinit();
    UARTsendinit();
    //UARTreceiveinit();
    
    while (1)
    {
        if(checkVoltageFlag == 1)
        {
            int delay = 0;
            AD1CON1bits.ADON = 1; // Turn on A/D
            AD1CON1bits.SAMP = 1; // Start sampling the input
            while(delay < 10)
            {
                delay++;
            }
            AD1CON1bits.SAMP = 0; // End A/D sampling and start conversion
        }
        
        if(UARTSendFlag == 1)//Change this to include flags for all sensors
        {
            confirmationReceive = 0;
            while(confirmationReceive == 0)
            {
                IEC0bits.T1IE = 0;
                int print = 0;
                char outputChar[8];
                sprintf(outputChar, "%c %02x", subNodeID, batteryVoltage);
                if (U2STAbits.UTXBF == 0)
                {
                    while(print < 8)
                    {
                        WriteUART2(outputChar[print]);
                        print++;
                    }
                }
                checkForReceive(); //Will check for confirmation from Super Node, if no, will delay and check again.
            }
            IEC0bits.T1IE = 1;
        }
    }
}

//*****************************************************************************************************************************************************************************************
//Interrupts
//*****************************************************************************************************************************************************************************************

void __attribute__((__interrupt__,no_auto_psv)) _T1Interrupt(void)
{
    countInterrupt++;
    if(countInterrupt == 3) //Interupts once every 20 seconds, 
    {
        countInterrupt = 0;
        countInterrupt2++;
    }
    else
    {
        IFS0bits.T1IF = 0;
    }
    if(countInterrupt2 == 10) //At 10 minutes
    {
        checkVoltageFlag = 1;
        countInterrupt2 = 0;
        finalValue++;
    }
    else
    {
            IFS0bits.T1IF=0;

    }
        IFS0bits.T1IF=0;
}

void __attribute__ ((__interrupt__)) _ADC1Interrupt(void)
{    
    batteryVoltage =  ADC1BUF0;
    UARTSendFlag = 1;
    IFS0bits.AD1IF = 0;
}

//*****************************************************************************************************************************************************************************************
//Initialization Code
//*****************************************************************************************************************************************************************************************

void TMR1init(void)
{
    T1CONbits.TON = 1;
    T1CONbits.TSIDL = 0;
    T1CONbits.T1ECS= 0b10;
    T1CONbits.TCKPS = 0b00;
    
}

void ADCinit(void)
{
    TRISAbits.TRISA0 = 1; //Use RA0 as input
    ANSAbits.ANSA0 = 1; //Analog input = AN0
    
    AD1CON1bits.FORM = 0b00; //Output of ADC is an integer: 0b---- --xx xxxx xxxx
    AD1CON1bits.SSRC = 0b000; //Clearing SAMP bit ends sampling and begins conversion
    AD1CON1bits.ADSIDL = 1; //Discontinue operation in idle mode
    AD1CON1bits.ASAM = 0; //Sampling begins when SAMP bit is set
    
    AD1CON3bits.ADRC = 0b0; //Clock derived from system clock
    AD1CON3bits.SAMC = 0b11111; //Auto sample time bits = T_AD
    AD1CON3bits.ADCS = 0b111111;
    
    
    AD1CHSbits.CH0NA = 0; //Negative reference voltage at VR-
    AD1CHSbits.CH0SA = 0b0000; //Positive input select for MUXA is AN0
    
    AD1CSSL = 0; // No inputs are scanned.
}

void Interruptinit(void)
{
    IEC0bits.T1IE = 1;
    IEC0bits.AD1IE = 1;
    IFS0bits.T1IF = 0;
    INTCON1bits.NSTDIS = 1; //Disable nested interrupts
    INTCON2bits.INT0EP = 0; //interrupt 0 on posedge
    PR1 = 100;
}


void UARTsendinit(void)
{
    U2MODEbits.UARTEN = 1;//enable UART
    U2MODEbits.USIDL = 0; // continue operation in idle mode
    U2MODEbits.STSEL = 0; // 1 stop bit
    U2MODEbits.PDSEL0 = 0;
    U2MODEbits.PDSEL1 = 0;// 8, N, 
    U2MODEbits.BRGH = 0;

    U2MODEbits.RXINV = 0;// rx idle state = 1
    U2MODEbits.ABAUD = 0;// no autobaud
    U2MODEbits.LPBACK = 0; // loopback mode disabled
    U2MODEbits.WAKE = 0; // wakeup disable
    U2MODEbits.UEN0 = 0;
    U2MODEbits.UEN1 = 0;
    U2MODEbits.RTSMD = 1;// rts mode 
    U2MODEbits.IREN = 0;// irda disabled
    U2STAbits.ADDEN = 0; // address mode disabled
      
    U2STAbits.URXISEL0 = 1;
    U2STAbits.URXISEL1 = 1; // interrupt any data received
    
    U2STAbits.UTXEN = 1; // transmit enabled
    U2STAbits.UTXBRK = 0; // break disabled
    
    U2STAbits.UTXISEL0 = 1;
    U2STAbits.UTXISEL1 = 0; // interrupt when txregister becomes empty
     
    U2BRG = 51 ; // 3.340277778
}

/*
void UARTreceiveinit(void)
{
    
}
*/

//*****************************************************************************************************************************************************************************************
//I2C Initialization
//*****************************************************************************************************************************************************************************************



//*****************************************************************************************************************************************************************************************
//Radio Code
//*****************************************************************************************************************************************************************************************

/*
void checkForReceive(void)
{
 * Insert code for checking if receive flag is 1. 
 * Set confirmationReceive = 1 if true.
 * Delay to wait for confirmation message.
 * int delay = 0;
 * if(!confirmation)
 * {
    * while(delay < 3000)
    * {
    *      delay++;
    * }
 * }
 * else
 * {
 *      confirmationReceive == 1;
 * }
 * 
}
*/

//*****************************************************************************************************************************************************************************************
//Temperature Sensor
//*****************************************************************************************************************************************************************************************



//*****************************************************************************************************************************************************************************************
//Humidity Sensor
//*****************************************************************************************************************************************************************************************



//*****************************************************************************************************************************************************************************************
//UV Sensor
//*****************************************************************************************************************************************************************************************


